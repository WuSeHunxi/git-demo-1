<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <script src="jquery.min.js"></script>
    <script>
        $(function(){
            /*
            1.on(type,callback):注册事件
            2.off(type,callback):移出事件
            */
            /*
            1.注册多个相同类型的事件，后注册的事件不会覆盖先注册的事件
            2.注册多个不同类型的事件，后注册的事件不会覆盖先注册的事件
            */
            /*
            在高级浏览器中可以使用addEventListener()来处理事件
            在IE8及其以下的低级浏览器使用attachEvent()来处理事件,而且事件名称需要加上on才可以
            */
            // var btn=document.querySelector("button");
            // btn.addEventListener("click",function(){
            //     alert("click1");
            // });
            // btn.attchEvent("onclick",function(){
            //     alert("click1");
            // });
            //封装一个事件方法
            function addEvent(dom,name,callBack){
                //btn "click" test1
                //btn "click" test2
                //btn "mouseover" test3
                //btn "mouseout" test4
                if(!dom.eventsCache){//如果元素没有eventCache这个属性 则进行添加
                    dom.eventsCache={};//给元素自定义一个属性 让该属性保存事件名称
                    //==>btn.eventCache={};
                }
                if(!dom.eventsCache[name]){//判断对象中是否有name这个属性 如果之前没有就要重新添加
                    /*
                    btn.eventCache={
                        clcik:[test1,test2],
                        mouseover:[test3],
                        mouseout:[test4]
                    }
                    */
                    dom.eventsCache[name]=[];
                    dom.eventsCache.push(callBack);//将事件保存到一个数组中
                    if(dom.eventsCache){//如果这个属性存在 就可以处理事件
                        if(dom.addEventListener){//此时是高级浏览器
                            //添加事件
                            //1.click数组  3.mouseover数组  4.mouseout数组
                            dom.addEventListener(name,function(){//给事件添加的回调函数通过for循环执行
                                for(var i=0;i<dom.eventsCache[name].length;i++){
                                    dom.eventsCache[name][i]();
                                }
                            });
                        }else{//低级浏览器
                            dom.attchEvent("on"+name,function(){
                                for(var i=0;i<dom.eventsCache[name].length;i++){
                                    dom.eventsCache[name][i]();
                                }
                            });
                        }
                    }
                }else{//当元素有eventCache这个自定义的属性时（第二次进行事件处理的时候）
                    dom.eventsCache[name].push(callBack);
                }
                
            }
            function test1(){
                alert("click1");
            }
            function test2(){
                alert("click2");
            }
            function test3(){
                alert("mouseover");
            }
            function test4(){
                alert("mouseout");
            }
            addEvent(btn,"click",test1);
            addEvent(btn,"click",test2);
            addEvent(btn,"mouseover",test3);
            addEvent(btn,"mouseout",test4);
            
                        
            /*
            off事件 不传参，会移除所有的事件
                    传递一个参数，会移出对应类型所有事件
                    传递两个参数，会移出对应类型的对应事件
            */


            //clone：复制一个元素 深复制 浅复制
            $("button").eq(0).on("click",function(){
                //浅复制一个元素
                var $li=$("li").clone(false);
                $("ul").append($li);
            });
            $("button").eq(0).on("click",function(){
                //深复制一个元素
                var $li=$("li").clone(true);
                $("ul").append($li);
            });
        });
    </script>
</head>
<body>
    <!-- 事件的HTML<button>click1</button>
    <button>click2</button> -->
    <!--clone方法--><button>浅复制
        <ul>
            <li></li>
            <li></li>
        </ul>
    </button>
    <button>深复制
        <ul>
            <li></li>
            <li></li>
        </ul>
    </button>
</body>
</html>