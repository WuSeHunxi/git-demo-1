1.JS的事件对象event
    event就是当前的事件的对象(当想要获取事件发生时的某些属性可以用event)
    只要触发DOM上的一个事件，就会产生一个当前事件的对象，这个对象中包含着所有与事件有关的信息
        例如：xxx.onmouseup=function(event)//此时的事件对象就是MouseEvent,就是鼠标事件对象
        target:谁产生的事件就是谁(DOM元素加上内容)//像上面的就是xxx标签和里面的内容
    通常的写法: var event=event||window.event;
    clientX/clientY:以当前的可视区域为基准的点击事件(不包含滚动距离)
    screenX/screenY:以屏幕为基准的点击事件进行测量，即：当前元素距离屏幕的尺寸(用于桌面弹窗)
    pageX/pageY:以当前的文档为基准的点击事件（包含滚动距离）
2.常见属性
    <script>
        document.onclick=function(event){
            var e=event||window.event;
            alert(event.screenX+','+event.screenY);
            alert(event.pageX+','+event.pageY);
        }
    </script>
3.动态获取鼠标的位置
    <style>
        *{
            margin:0;
            padding:0;
        }
        #box{
            width:200px;
            height:200px;
            background-color:red;
            margin:100px;
        }
    </style>
    <div id="box"></div>
    </script>
        var box=document.getElementById("box");
        box.onmousemove=function(event){
            var e=event||window.event;
            var x=event.clientX-box.offsetLeft;//长距离减小距离
            var y=event.clientY-box.offsetTop;//长的减去小的距离
        }
    </script>
4.放大镜的特效(利用上面说的属性)
    <style>
        *{
            margin:0;
            padding:0;
            list-style:none;
            border:none;
        }
        img{
            vertical-align:top;//去除图片之间的间隙
        }
        #box{
            width:350px;
            height:350px;
            margin:100px 0 0 100px;
        }
        #small_box{
            width:100%;
            height:100%;
            border:1px solid #ccc;
            position:relative;
        }
        #small_box img{
            width:350px;
            height:350px;
        }
        #mask{//设置黄色的小盒子
            width:100px;
            height:100px;
            background-color:#ff0;
            opacity:0.4;
            position:absolute;//通过定位将span转成块级元素可以显示出来
            left:0;//必须设置，因为在后面的移动距离要用到left
            top:0;//必须设置，因为在后面的移动距离要用到top
            cursor:move;
            display:none;
        }
        #big_box{
            width:600px;
            height:600px;
            border:1px solid #ccc;
            overflow:hidden;//大图片超出设置范围需要隐藏
            position:absolute;
            left:360px;
            top:0;//相对于父盒子box的top是0
            display:none;
        }
        #list{
            margin:20px 0 0 100px;
        }
        #list img{
            margin:5px;
        }
    </style>
    <div id="box">
        <div id="small_box">
            <img src="images/a1.png" alt="">
            <span id="mask"></span>
        </div>
        <div id="big_box">
            <img id="big_img" src="images/a2.png" alt="" style="position:absolute;left:0;top:0;">//大图片
        </div>
    </div>
    <div id="list">
        <img src="" alt="">//小图片列表
        <img src="" alt="">
        <img src="" alt="">
    </div>
    <script>
        //获取需要的标签
        var box=document.getElementById("box");
        var small_box=box.children[0];
        vra big_box=box.children[1];
        var mask=small_box.children[1];
        var big_img=big_box.children[0];
        var list_img=document.getElementById("list").children;
        //监听鼠标进入小盒子
        small_box.onmouseover=function(){
            //把隐藏的内容显示
            mask.style.display='block';
            big_box.style.display='block';
            //监听鼠标的移动
            small_box.onmousemove=function(event){
                //获取移动的距离
                var pointX=small_box.clientX-box.offsetLeft-small_box.offsetWidth*0.5;
                var pointY=small_box.clientY-box.offsetTop-small_box.offsetHeight*0.5;
                //判断移动的范围
                if(pointX<0){
                    pointX=0;
                }else if(pointX>=small_box.offsetWidth-mask.offsetWidth){
                    pointX=small_box.offsetWidth-mask.offsetWidth;
                }
                if(poinY<0){
                    pointY=0;
                }else if(pointY>=small_box.offsetHeight-mask.offsetHeight){
                    pointY=small_box.offsetHeight-mask.offsetHeight;
                }
                //让放大镜移动起来
                mask.style.left=pointX+'px';
                mask.style.top=pointY+'px';
                //让右边的大图移动起来,需要给大图定位才能使其移动
                //smallX(pointX)/bigX(大图的left属性)=smallBox.width/大图的宽度(比例换算,只需要求解bigX即可)
                big_img.style.left=-pointX/(small_box.offsetWidth/big_box.offsetWidth)+'px';
                big_img.style.top=-pointY/(small_box.offsetHeight/big_box.offsetHeight)+'px';
            }
        };
        //监听鼠标离开小盒子
        small_box.onmouseout=function(){
            //把隐藏的内容显示
            mask.style.display='none';
            big_box.style.display='none';
        };
        //遍历所有图片为了改变小盒子和大盒子里面的内容(可以使用闭包,减少循环次数)
        for(var i=0;i<list_img.length;i++){
            (function(i){
                var img=list_img[i];
                img.onmouseover=function(){
                    small_box.children[0].src="images/a"+(i+1)+".png";//大图片的拼接路径
                    big_img.src="images/a"+(i+1)+".png";//大图片的拼接路径
                }
            })(i);
        }
    </script>
5.进度条的变化（也要应用比例）
    <style>
        *{
            margin:0;
            padding:0;
            list-style:none;
            border:none;
        }
        #progress{
            width:1000px;
            height:35px;
            margin:100px auto;
            line-height:35px;
            position:relative;
        }
        #progress_bar{
            width:900px;
            height:100%;
            background-color:#ccc;
            border-radius:8px;
            position:relative;
        }
        #progress_value{
            position:absolute;
            right:30px;//通过定位来决定right和top的大小，父级relative,相对于父级
            top:0;
        }
        #progress_bar_fg{
            width:0;
            height:100%;
            border-top-left-radius:8px;
            border-bottom-left-radius:8px;
            background-color:orange;
        }
        span{
            width:25px;
            height:50px;
            background-color:orange;
            position:absolute;
            left:0;
            top:-7px;
            cursor:pointer;
        }
    </style>
    <div id="progress>
        <div id="progress_bar">
            <div id="progress_bar_fg"></div>
            <span></span>
        </div>
        <div id="progress_value">0%</div>
    </div>
    <script>
        var progress=document.getElementById("progress");
        var progress_bar=progress.children[0];
        var progress_bar_fg=progress_bar.children[0];
        var progress_value=progress.children[1];
        var mask=progress_bar.children[1];
        //监听鼠标在mask里按下的事件
        mask.onmousedown=function(event){
            var e=event||window.event;
            //获取鼠标的初始位置
            var offsetLeft=e.clientX-mask.offsetLeft;//当前事件对象的clientX
            //鼠标移动事件
            document.onmousemove=function(event){//为保证当按下之后能够在页面中的那个位置都可以进行拖拽，所以把时间作用在document上
                var e=event||window.event;//事件源不一样
                //获取移动的位置
                var x=e.clientX-offsetLeft;
                //边界值的处理
                if(x<0){
                    x=0;
                }else if(x>=progress_bar.offsetWidth-mask.offsetWidth){
                    x=progress_bar.offsetWidth-mask.offsetWidth;
                }
                //走起来
                mask.style.left=x+'px';
                progress_bar_fg.style.width=x+'px';//填充前景色
                //用此时移动的距离除以总长度
                progress_value.innerHTML=parseInt(x/(progress_bar.offsetWidth-mask.offsetWidth)*100)+'%';
                return false;
            }
            document.onmouseup=function(){
                document.onmousemove=null;
            }
        }
    </script>
6.橱窗展示商品(利用滚动条)
    需要球滚动条的长度+拖动滚动条时，内容要走多少
    滚动条的长度取决于滚动条的内容
    内容滚动的距离和滚动条走的距离成倍数关系
    换算公式：
        获取滚动条的长度：
            滚动条的长度/盒子的长度=盒子的长度/内容的长度;
        拖动滚动条，求内容走的长度
            内容走的距离=（内容的长度-盒子的长度）/（盒子的长度-滚动条的长度）*滚动条走的距离;
    <style>
        *{
            padding:0;
            margin:0;
            list-style:none;
        }
        #box{
            width:800px;
            height:200px;
            border:1px solid #ccc;
            position:relative;
            margin:100px auto;
            overflow:hidden;
        }
        #box ul{
            position:absolute;
            top:20px;
            left:0;
            width:1300px;
        }
        #box ul li{
            float:left;
        }
        #box_bottom{
            position:absolute;
            left:0;
            bottom:0;
            background-color:#e8e8e8;
            width:100%;
            height:25px;
        }
        .mask{
            position:absolute;
            letf:0;
            top:0;
            height:25px;
            background-color:orange;
            border-radius:12px;
            cursor:pointer;
        }
    </style>
    <div id="box">
        <ul id="box_top">
            <li><img src="images/a1.png" alt=""></li>
            <li><img src="images/a2.png" alt=""></li>
            <li><img src="images/a3.png" alt=""></li>
            <li><img src="images/a4.png" alt=""></li>
            <li><img src="images/a1.png" alt=""></li>
            <li><img src="images/a2.png" alt=""></li>
            <li><img src="images/a3.png" alt=""></li>
            <li><img src="images/a4.png" alt=""></li>
            <li><img src="images/a1.png" alt=""></li>
            <li><img src="images/a2.png" alt=""></li>
        </ul>
        <div id="box_bottom">
            <span class="mask"></span>
        </div>
    </div>
    <script>
        var box=document.getElementById("box");
        var box_top=document.getElementById("box_top");
        var box_bottom=document.getElementById("box_bottom");
        var mask=box_bottom.children[0];
        //设置滚动条的长度
        var mask_len=(box.offsetWidth/box_top.offsetWidth)*box.offsetWidth;
        mask.style.width=mask_len+'px';
        //鼠标操作
        mask.onmousedown=function(event){
            var e=event||window.event;
            //求出滚动条的初始值
            var beginX=e.clientX-mask.offsetLeft;
            //鼠标移动
            document.onmousemove=function(event){
                var e=event||window.event;
                //求出移动的距离
                var x=e.clientX-beginX;
                //边界值
                if(x<0){
                    x=0;
                }else if(x>=box.offsetWidth-mask.offsetWidth){
                    x=box.offsetWidth-mask.offsetWidth;
                }
                //动起来
                mask.style.left=x+'px';
                //内容走的距离
                var content_len=(box_top.offsetWidth-box.offsetWidth)/(
                box.offsetWidth-mask.offsetWidth)*x;
                box_top.style.left=-content_left+'px';
                return false;
            }
            document.onmouseup=function(){
                document.onmousemove=null;
            }
        }
    </script>
7.Document对象是Window对象的一部分,可通过window.document属性对其进行访问
  document对象可以使我们从脚本中获取HTML页面中的所有元素
    document.head(获取整个头部)
    document.body(获取身体)
    document.title(获取标题)
    document.documentElement(获取整个html)
    浏览器的模式Document.compatMode：怪异模式||标准模式
                 BackCompat||CSS1Compat
   【例】浏览器的宽度：x=document.documentElement.clientWidth||document.body.clientWidth;
8.scroll家族(谷歌需要把body换成documentElement)
    网页正文全文宽:document.body.scrollWidth;
    网页正文全文高:document.body.scrollHeight;
    网页被卷进去的高:document.body.scrollTop;
    网页被卷进去的左宽:document.body.scrollLeft;
    ******在实际开发中使用较多的是scrollTop
    浏览器的配置问题：
        IE9+最新的浏览器
            window.pageXOffset==>scrollLeft;
            window.pageYOffset==>scrollTop;
        火狐+其他浏览器
            document.documentElement.scrollTop;             
        兼容写法：
            var scrollTop=window.pageYOffset||document.body.scrollTop||
            document.documentElement.scrollTop||0;
9.Json是一种数据交换格式，目前的数据传递基本上都是用Json
  Json有两种结构：对象{}和数组[]
                 数据在键值对中
                 数据由逗号分隔
                 花括号保存对象
                 方括号保存数组
    var persons=[{"name":"张三","age":"18","sex":"男"},
        {"name":"赵三","age":"18","sex":"男"},
        {"name":"孙三","age":"18","sex":"男"},
        {"name":"李三","age":"18","sex":"男"},
        {"name":"王三","age":"18","sex":"男"},
    ];
10.Json封装scrollTop
    <style>
        body{
            height:300px;
        }
    </style>
    <script>
        //获取滚动的头部距离和左部距离：scroll().top   scroll().left
        function scroll(){
            if(window.pageYOffset!==null){
                return{
                    top:window.pageYOffset,
                    left:window.pageXOffset
                }
            }else if(document.compatMode==="CSS1Compat"){
                return{
                    top:document.documentElement.scrollLeft,
                    left:document.documentElement.scrollLeft
                }
            }
            return{
                top:document.body.scrollTop,
                left:document.body.scrollLeft
            }
        }
11.瀑布流布局:一种布局(宽度一样高度不一样)
    通常第一行是确定的，因此要在第二行开始进行布局，第二行的布局遵循一个规则：
        第一行第一矮的要和第二行第一矮的挨在一起，以方便布局匀称
    唯美 操作简单 主要以图片为主
    需要计算各种高度 不利于SEO优化
    <style>
        *{
            margin: 0;
            padding: 0;
            list-style:none;
        }
        img{
            vertical-align: top;
        }
        html,body{
            width: 100%;
            height: 100%;
        }
        #main{
            position: relative;
        }
        .box{
            float:left;
            padding: 15px 0 0 15px;/*图片之间的间隙*/
        }
        .pic{
            padding: 10px;
            border:1px solid #ccc;
            border-radius: 5px;
            background-color: #fff;
        }
        .pic img{
            
        }
    </style>
    <div id="main">
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a2.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a3.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a4.png" alt=""></div></div>
        <div class="box"><div class="pic"><img src="images/a1.png" alt=""></div></div>
    </div>
    <script>
        waterFull("main","box");
        function waterFull(parent,child){
            //父盒子居中:动态居中(因为box在滚动的时候会动态的加载出图片)
            //获取所有的盒子
            var allBox=$(parent).getElementsByClassName(child);
            //获取盒子的宽度
            var boxWidth=allBox[0].offsetWidth;
            //页面中每一行显示的盒子的个数取决于页面的宽度
            var screenW=document.documentElement.clientWidth;//(获取屏幕的宽度)
            //求出列数
            var cols=parseInt(screenW/boxWidth);
            //父盒子居中
            $(parent).style.width=cols*boxWidth+"px";
            $(parent).style.margin="0 auto";
            //子盒子定位(第一行子盒子)，利用数组来进行计算
            var heightArr=[],boxHeight=0,minBoxHeight=0,minBoxIndex=0;
            //遍历所有的子盒子
            for(var i=0;i<allBox.length;i++){
                //求出每一个子盒子的高度
                boxHeight=allBox[i].offsetHeight;
                //判断盒子所在的行数,即：如果索引数<列数那么就在第一行
                //去除第一行的盒子的高度放入高度数组中
                if(i<cols){//第一行
                    heightArr.push(boxHeight);
                }else{//剩余所有行
                    //去除最矮的盒子高度（特殊处理）
                    minBoxHeight=Math.min.apply(this,heightArr);//利用了apply借调
                    //求出最矮的盒子对应的索引
                    minBoxIndex=getMinBoxIndex(heightArr,minBoxHeight);
                    //子盒子定位
                    allBox[i].style.position="absolute";
                    allBox[i].style.left=minBoxIndex*boxWidth+"px";
                    allBox[i].style.top=minBoxHeight+"px";
                    //更新数组中最矮的高度
                    heightArr[minBoxIndex]+=boxHeight;
                }
            }
        }
        //求索引函数,需要接收参数
        function getMinBoxIndex(arr,value){
            for(var i=0;i<arr.length;i++){
                if(arr[i]===value){//第i个盒子的高度===最矮的盒子的高度
                    return i;
                }
            }
        }
        function $(id){
            return typeof id==="string"?document.getElementById(id):null;
        }
    </script>