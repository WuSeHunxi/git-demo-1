<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <script>
        //创建正则表达式
        var reg=new RegExp('partent');
        var reg=/partent/;   
        //正则表达式的exec方法简介:返回的是数组
        reg.exec(str);//str为要执行正则表达式的目标字符串
        var reg=/test/;
        var str='testExam';
        var result=reg.exec(str);
        console.log(result);
        //c{n}:表示连续匹配'c'n次,正则表达式会尽可能的匹配多个
        reg=/c{3,4}/;
        str='ccccTest';
        execReg(reg,str);//cccc:可三个可四个的时候会尽量选择匹配多个，因此是4个c(贪婪匹配)
        //c{n,}:表示匹配n次没有上限，有几个匹配几个
        reg=/c{1,}/;
        str='ccccText';
        execReg(reg,str);//cccc
        //*,+,?（量词）
        //*表示0次或多次===>{0,}:可以没有也可以多个
        //+表示一次或多次===>{1,}:最少是一个，也可以多个
        //?表示0次或1次===>{0,1}
        //贪婪匹配  非贪婪匹配
        //   只有一个量词是贪婪匹配
        reg=/c{1,}/;
        str='cccc';
        ececReg(reg,str);//结果为:cccc
        //   一个量词后面还跟着一个量词是非贪婪匹配
        reg=/c{1,}?/;
        str='cccc';
        ececReg(reg,str);//结果为:c(非贪婪)
        /^开头,$结尾/
        // ^表示只匹配字符串的开头
        reg=/^c/;//只匹配以c开头的字符串
        str='维生素c';
        execReg(reg,str);//结果为:null,匹配失败
        reg=/^c/;//只匹配以c开头的字符串
        str='cima维生素c';
        execReg(reg,str);//结果为:c,匹配成功
        // $表示只匹配字符串的结尾
        reg=/^c/;//只匹配以c结尾的字符串
        str='维生素c';
        execReg(reg,str);//结果为:c,匹配成功
        reg=/^c/;//只匹配以c结尾的字符串
        str='cima维生素';
        execReg(reg,str);//结果为:null,匹配失败
        //点'.':会匹配除了换行符\n以外的所有字符,一个点匹配一个
        reg=/./;
        str='cima维生素';
        execReg(reg,str);//结果为:c
        reg=/.+/;
        str='cima维生素';
        execReg(reg,str);//结果为:cima维生素
        //某一个量词加上转义符之后表示的是自己本身，没有特殊含义
        // /\?/:只表示问号
        reg=/^b|c.+/;//表示匹配以b开头的字符串,或者是匹配含有c.+的字符串
        str='cima维生素';
        execReg(reg,str);//结果为:null(不是以b开头，也不是含有c.+的字符串
        reg=/^(b|c).+/;
        str='cima维生素';
        execReg(reg,str);
        //[abc]:表示a,b,c中的任何一个,[]也表示或的意思
        //字符集: [a-z],[A-Z],[0-9]
        reg=/^[a-zA-Z][a-zA-Z0-9_]+/;//开头必须是字母,中间可以是字母也可以是数字还可以是_,+表示多个
        str='cima维生素';
        execReg(reg,str);//结果为:cima维生素
        //反字符集合:在[]里面加上^表示取反
        reg=/[^abc]/;//匹配的不是a,b,c中的任何一个都可以,只能是一个
        str='cima维生素';//c不可以,i符合条件
        execReg(reg,str);//结果为:i
        //[^0-9]:表示非数字
        //边界 非边界
        //\b表示边界:只要想要匹配的字符左边或者右边没有字符即可（除空格以外）
        //\B表示非边界
        reg=/\bc///左边界
        str='ab cima维生素';
        execReg(reg,str);//结果为:c
        reg=/\bc///左边界
        str='cima维生素';
        execReg(reg,str);//结果为:c(匹配的是左边界)
        reg=/c\b///右边界
        str='imac';
        execReg(reg,str);//结果为:c(匹配的是右边界) 
        //\d:表示数字(一个)  \D:表示非数字(一个)
        //\s:用于查找空白字符(换行 空格 回车 制表符等) \S:表示非空白字符
        reg=/\s.+/;//先找到一个空格,后面的是啥无所谓
        str='This is a test String';
        reg.exec(str);//结果为: is a test String
        //\w===>[a-zA-Z0-9]  \W:表示\w的反
        var reg=/\w\w/;
        var str='abcd';
        reg.exec(str);//["ab"](匹配的结果)
        var reg=/(\w)(\w)/;//()表示一个子表达式
        var str="abcd";
        reg.exec(str);//["ab","a","b"](匹配的结果和子表达式)
        //(\w)\1:表示连续的两个相同的字符(\1是反向引用)
        //反向引用\()\数字:表示反向引用(\数字几就表示第几个)
        reg=/(\w)\1/;
        str="blueidea";
        execReg(reg,str);//结果为:null
        reg=/(\w)(\w)\2\1/;//第一个括号匹配到的是w，第二个括号匹配到的是o，\2\1则表示ow
        str="woow";
        execReg(reg,str);//结果为:woow,匹配成功
        //把"Doe, John"转换成"John Doe"
        name="Doe, John";
        name.replace(/(\w+)\s*, \s*(\w+)/,"$2 $1");
        //$1 $2只能用在replace()方法中，也是反向引用
        //g:全局匹配 i:不区分大小写
        var reg=/b/i;
        var str='BBs';
        reg.exec(str);//结果为:B
        //test()方法:返回值是布尔类型
        //统一空个数
        var str="蓝 色  理   想 ";
        var reg=/\s+/g;
        str=str.replace(reg," ");
        document.write(str);//结果为:蓝 色 理 想
        //去除字符串的首尾空格
        function trim(str){
            return str.replace(/^\s+|\s+$/g,'');
        }
        //封装一个class的方法
        function getByClass(className,context){
            context=context||document;
            var result=[];
            var arr=context.getElementsByTagName("*");
            var reg=new RegExp("\\b"+className+"\\b",'g');
            for(var i=0;i<arr.length;i++){
                if(reg.test(arr[i].className)){
                    result.push(arr[i]);
                }
            }
            return result;
        }
        var oUl=document.getElementById("uli");
        var aLi=getByClass("aa",oUl);
        console.log(aLi);
    </script>
</body>
</html>