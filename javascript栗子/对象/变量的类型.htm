<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>

<body>
    <script>
        //原始数据类型：undefined，null， object，string，boolean，number
        //值类型：number，string，boolean
        //引用类型：object
        //空类型：undefined，null

        //值类型的值在哪里存储？ --->在栈中存储
        //引用类型的值在哪里存储？ --->在栈和堆中存储（栈中存的是地址，堆中存的是对象）

        //值类型之间的传递，传递的是值
        function f1(num) { // 形参
            num = 100; // 不会改变实参的值
        }
        var num = 10;
        f1(num); // 实参
        console.log(num);

        //引用类型之间的传递，传递的是地址
        var obj = {
            name: "小明"
        }
        function f2(obj2) {
            obj2.name = "夏红";
        }
        f2(obj);
        console.log(obj.name);
        
        //值传递的例子
        var num1 = 55;
        var num2 = 66;
        function f1(numm, num1) {
            numm = 100;
            num1 = 100;
            num2 = 100; //在函数执行完之后，把num2的值给改成了100
            console.log(numm);//100
            console.log(num1);//100
            console.log(num2);//100
        }

        f1(num1, num2);
        console.log(num1);//55
        console.log(num2);//100
        console.log(numm);// 报错，因为这里的num是函数传进去的num1的形参，属于局部变量

        //引用值传递例子
        function Person(name,age){
            this.name=name;
            this.age=age;
        }
        function f4(person){
            person.name="haha";
            person=new Person("嘻嘻",10);
        }
        var p=new Person("iii",19);
        console.log(p.name);
        f4(p);
        console.log(p.name);
    </script>
</body>

</html>