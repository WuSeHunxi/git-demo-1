<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <script>

        //原型对象中的方法是可以相互调用的
        function Student(name,age){
            this.name=name;
            this.age=age;
        }
        Student.prototype.eat=function(){
            console.log("eating");
            this.sleep();
        }
        Student.prototype.sleep=function(){
            console.log("sleeping");
        }
        var stu=new Student("ll",10);
        stu.eat();



        //实例对象的属性和方法 层层搜索
        /*
        实例对象调用的属性和方法要先在实例对象中查找，如果实例对象中没有，那就要到原型对象中查找，即在构造函数的prototype这个属性中查找
        */
        function Person(name){
            this.name=name
        }
        Person.prototype.sex="nan";
        var per=new Person("oo");
        console.log(per.sex);// 这个就是在原型对象中找到的，因为实例化对象中没有这个属性


        //给String对象添加一个自己写的反转字符串的方法
        String.prototype.myReverse=function(){
            for(var i=this.length-1;i>=0;i--){
                console.log(this[i]);
            }
        }
        var str="nihao";
        str.myReverse();


        //给数组添加一个稳定的比较大小的方法
        Array.prototype.mySort=function(){
            for(var i=0;i<this.length-1;i++){
                for(var j=0;j<this.length-1-i;j++){
                    if(this[j]<this[j+1]){
                        var temp=this[j];
                        this[j]=this[j+1];
                        this[j+1]=temp;
                    }
                }    
            }
            console.log(this);
        }
        var array=[1,2,4,3,6,7];
        array.mySort();
    </script>
</body>
</html>